import { Route, Routes } from "react-router-dom";
import ProtectRoute from "./components/ProtectRoute";
import Dashboard from "./pages/Dashboard";
import AuthUser from "./pages/AuthUser";
import "./App.css";
import Nav from "./components/Nav";
import Footer from "./components/Footer";
const App = () => {
  return (
    <div className="w-full flex justify-center flex-col">
      <Routes>
        <Route
          path="/"
          element={
            <div>
              <Nav />
              <div className="flex items-center flex-col px-6">
                <h1 className="text-black font-bold text-2xl my-5">
                  Welcome to private diary
                </h1>
                <p className="text-center text-lg">
                  Create private entries, log your activities update records and
                  publish what you want the public to see
                </p>
                <button className="uppercase underline mt-16 outline-none">
                  get started
                </button>
                <AuthUser />
              </div>
              <Footer />
            </div>
          }
        />
        {/* auth user route */}
        {/* <Route path="/auth/login" element={<AuthUser />} /> */}
        {/* protected route and dashboard */}
        <Route
          path="/dashboard"
          element={
            <ProtectRoute>
              <Dashboard />
            </ProtectRoute>
          }
        />
      </Routes>
    </div>
  );
};

export default App;




// import { useAppSelector, useAppDispatch } from "../hooks/hook";
// import { RootState } from "../app/store";
// import { logoutAll } from "../features/UserSlice";
// import { useNavigate } from "react-router-dom";
const Dashboard = () => {
  // const dispatch = useAppDispatch();
  // const navigate = useNavigate();
  // const user = useAppSelector((state: RootState) => state.user);

  //! destructure user details and assign types to object properties
  
  // const { displayName, photoURL } = user.user as {
  //   displayName: string;
  //   photoURL: string;
  // };
  //! logout function FB && Google redirect to auth/login page
  const logout = () => {
  //   dispatch(logoutAll());
  //   navigate("/");
  // };
  return (

    //! display user name and profile picture

    <div className="w-[90%] mx-8 min-h-[100vh]">
      <nav className="flex justify-between w-full py-4 flex-col">
        <h1 className="text-xl font-bold">My Diary</h1>
        <div className="flex justify-end">
          <div className="flex items-center pr-4">
            {/* <p className="pr-4">Welcome {displayName}</p>
            <span className="w-10 h-10">
              <img
                src={photoURL}
                alt={displayName}
                className="w-full h-full rounded-full"
                referrerPolicy="no-referrer"
              />
            </span> */}
          </div>
          <button
            className="border outline-none px-1 rounded-lg"
            // onClick={logout}
          >
            Logout
          </button>
        </div>
      </nav>
    </div>
  );
};

export default Dashboard;


isPrivate Red: #E40E35
isPublic Green: #248913




<Entry
            id="category"
            type="select"
            label="Category"
            {...formik.getFieldProps("category")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.category}
          />
          <Entry
            type="textarea"
            id="description"
            label="Description"
            {...formik.getFieldProps("description")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.description}
          />
          <Entry
            type="file"
            id="image"
            label="Upload image (optional)"
            {...formik.getFieldProps("image")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.image}
          />
          <Entry
            type="checkbox"
            id="isPublic"
            label="Is entry public?"
            {...formik.getFieldProps("isPublic")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.isPublic}
          />
          <Entry type="submit" id="" label="" handleBlur={null} handleChange={null} formValue={null}/>
















          import { faXmark } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import FormEntry from "./FormEntry";
import Nav from "./Nav";
import Footer from "./Footer";
import { useNavigate } from "react-router-dom";
const DiaryEntry = () => {
  const navigate = useNavigate();
  const closeEntry = () => {
    navigate("/dashboard");
  };
  return (
    <div className="w-full">
      <Nav headerText="New entry" />
      <div className="mx-6 pb-8">
        <div className="-mt-5 flex justify-between items-center">
          <h2 className="text-xl font-bold">Create a new diary</h2>
          <FontAwesomeIcon icon={faXmark} onClick={closeEntry} className="cursor-pointer text-2xl"/>
        </div>
        <FormEntry />
      </div>
      <Footer />
    </div>
  );
};

export default DiaryEntry;



interface Props {
  type: string;
  id: string;
  label: string;
  name: string;
  handleChange: () => void | any;
  handleBlur: () => void | any;
  formValue: string | boolean | null;
}
import { useFormik } from "formik";
import * as Yup from "yup";
// import ErrorMSG from "./ErrorMSG";
import Button from "./Button";
const Entry = ({
  type,
  id,
  label,
  name,
  handleBlur,
  handleChange,
  formValue,
}: Props) => {
  const formik = useFormik({
    initialValues: {
      category: "",
      description: "",
      image: null,
      isPublic: true,
    },
    validationSchema: Yup.object({
      category: Yup.string().required("Required"),
      description: Yup.string().required("Required"),
      // image: Yup.mixed().test(
      //   "fileType",
      //   "Invalid file type",
      //   (value) => value && ["image/jpeg", "image/png"].includes(value.type)
      // ),
    }),
    onSubmit: (values) => {
      alert(
        `You've successfully submitted: ${JSON.stringify(values, null, 500)}`
      );
      formik.resetForm();
    },
  });
  console.log(formValue);
console.log(name);

  return (
      <div className="bg-[#fff] sm:w-full">
        {type === "select" ? (
          <div className={`flex flex-col mb-4`}>
            <label htmlFor={id} className="py-2 cursor-pointer">
              {label}
            </label>
            <select
              // {...formik.getFieldProps("category")}
              id={id}
              className="py-[0.6rem] px-4 border outline-none border-black rounded-[0.25rem]"
            >
              <option value="">Category</option>
              <option value="Category">Category</option>
              <option value="Category">Category</option>
              <option value="Category">Category</option>
            </select>
            {/* {formik.touched.category && formik.errors.category ? (
              <ErrorMSG error_value={formik.errors.category} />
            ) : null} */}
          </div>
        ) : null}
        {type === "textarea" ? (
          <div className={`flex flex-col mb-4`}>
            <label htmlFor={id} className="py-2 cursor-pointer">
              {label}
            </label>
            <textarea
              // {...formik.getFieldProps("description")}
              id={id}
              placeholder="Enter description here"
              className="py-[0.6rem] pb-16 px-4 border outline-none border-black rounded-[0.25rem] placeholder:italic placeholder:text-partial"
            />
            {/* {formik.touched.description && formik.errors.description ? (
              <ErrorMSG error_value={formik.errors.description} />
            ) : null} */}
          </div>
        ) : null}
        {type === "file" ? (
          <div className={`flex flex-col mb-4`}>
            <label htmlFor={id} className="py-2 cursor-pointer">
              {label}
            </label>
            <input
              type={type}
              id={id}
              className=""
              name="image"
              // !event handle for file change input
              // onChange={(event) => {
              //   formik.setFieldValue("image", event.target.files[0]);
              // }}
            />
            {/* {formik.touched.image && formik.errors.image ? (
              <ErrorMSG error_value={formik.errors.image} />
            ) : null} */}
          </div>
        ) : null}
        {type === "checkbox" ? (
          <div className={`flex`}>
            <input
              type={type}
              id={id}
              className=""
              // {...formik.getFieldProps("isPublic")}
            />
            <label htmlFor={id} className="pl-4 cursor-pointer text-sm">
              {label}
            </label>
            {/* {formik.touched.isPublic && formik.errors.isPublic ? (
              <ErrorMSG error_value={formik.errors.isPublic} />
            ) : null} */}
          </div>
        ) : null}
        {type === "submit" && (
          // <button type="submit">Save</button>
          <Button
            type="submit"
            textContent="Save"
            styleProps="bg-black text-white mt-8 border px-4 py-3 rounded-md text-sm font-bold w-full"
          />
        )}
      </div>
    </form>
  );
};

export default Entry;


import { useAppSelector, useAppDispatch } from "../hooks/hook";
import { RootState } from "../app/store";
import { logoutAll } from "../features/UserSlice";
import { useNavigate } from "react-router-dom";
const Dashboard = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const user = useAppSelector((state: RootState) => state.user);

  //! destructure user details and assign types to object properties
  
  const { displayName, photoURL } = user.user as {
    displayName: string;
    photoURL: string;
  };

  <span className="w-10 h-10">
              <img
                src={photoURL}
                alt={displayName}
                className="w-full h-full rounded-full"
                referrerPolicy="no-referrer"
              />
            </span>














import {auth, googleProvider, facebookProvider} from '../utils/firebase'
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import {signInWithPopup, updateProfile,FacebookAuthProvider, User} from "firebase/auth"
import { AppDispatch } from '../app/store';

interface UserState {
  isAuthenticated: boolean;
  user: object | null;
}

const initialState: UserState = {
  isAuthenticated: false,
  user: null,
};

const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    //! state handle if auth is successful return auth user
    setUser: (state, action: PayloadAction<object | null>) => {
      state.isAuthenticated = action.payload !== null;
      state.user = action.payload;
    },
  },
});

//!user instance
export const { setUser } = userSlice.actions;

export default userSlice.reducer;

//! signup with google provider handler

export const signInWithGoogle = () => async (dispatch: AppDispatch) => {
  try {
    //!Popup login
    const userCredential = await signInWithPopup(auth, googleProvider);
    //! serialize data from login response payload
    const data = userCredential.user.toJSON()
    // dispatch(setUser(JSON.stringify(userCredential.user.uid)));
    dispatch(setUser(data));
  } catch (error) {
    console.error(error);
  }
};

//! signup with Facebook provider handler

export const signInWithFacebook = () => async (dispatch: AppDispatch) => {
  try {
    //!Popup login
    const userCredential = await signInWithPopup(auth, facebookProvider);
    const credential = FacebookAuthProvider.credentialFromResult(userCredential)
    const token = credential?.accessToken  
    const photoUrl = userCredential.user.photoURL + '?height=500&access_token=' + token
    await updateProfile(auth.currentUser as User, {photoURL: photoUrl})
    //! serialize data from login response payload
    const data = userCredential.user.toJSON()
    dispatch(setUser(data));
    // dispatch(setUser(JSON.stringify(userCredential.user.uid)));
  } catch (error) {
    console.error(error);
  }
};

//! facebook and google logout handler 

export const logoutAll = () => async (dispatch: AppDispatch) => {
  try {
    await auth.signOut();
    dispatch(setUser(null));
  } catch (error) {
    console.error(error);
  }
};
