import { Route, Routes } from "react-router-dom";
import ProtectRoute from "./components/ProtectRoute";
import Dashboard from "./pages/Dashboard";
import AuthUser from "./pages/AuthUser";
import "./App.css";
import Nav from "./components/Nav";
import Footer from "./components/Footer";
const App = () => {
  return (
    <div className="w-full flex justify-center flex-col">
      <Routes>
        <Route
          path="/"
          element={
            <div>
              <Nav />
              <div className="flex items-center flex-col px-6">
                <h1 className="text-black font-bold text-2xl my-5">
                  Welcome to private diary
                </h1>
                <p className="text-center text-lg">
                  Create private entries, log your activities update records and
                  publish what you want the public to see
                </p>
                <button className="uppercase underline mt-16 outline-none">
                  get started
                </button>
                <AuthUser />
              </div>
              <Footer />
            </div>
          }
        />
        {/* auth user route */}
        {/* <Route path="/auth/login" element={<AuthUser />} /> */}
        {/* protected route and dashboard */}
        <Route
          path="/dashboard"
          element={
            <ProtectRoute>
              <Dashboard />
            </ProtectRoute>
          }
        />
      </Routes>
    </div>
  );
};

export default App;




// import { useAppSelector, useAppDispatch } from "../hooks/hook";
// import { RootState } from "../app/store";
// import { logoutAll } from "../features/UserSlice";
// import { useNavigate } from "react-router-dom";
const Dashboard = () => {
  // const dispatch = useAppDispatch();
  // const navigate = useNavigate();
  // const user = useAppSelector((state: RootState) => state.user);

  //! destructure user details and assign types to object properties
  
  // const { displayName, photoURL } = user.user as {
  //   displayName: string;
  //   photoURL: string;
  // };
  //! logout function FB && Google redirect to auth/login page
  const logout = () => {
  //   dispatch(logoutAll());
  //   navigate("/");
  // };
  return (

    //! display user name and profile picture

    <div className="w-[90%] mx-8 min-h-[100vh]">
      <nav className="flex justify-between w-full py-4 flex-col">
        <h1 className="text-xl font-bold">My Diary</h1>
        <div className="flex justify-end">
          <div className="flex items-center pr-4">
            {/* <p className="pr-4">Welcome {displayName}</p>
            <span className="w-10 h-10">
              <img
                src={photoURL}
                alt={displayName}
                className="w-full h-full rounded-full"
                referrerPolicy="no-referrer"
              />
            </span> */}
          </div>
          <button
            className="border outline-none px-1 rounded-lg"
            // onClick={logout}
          >
            Logout
          </button>
        </div>
      </nav>
    </div>
  );
};

export default Dashboard;


isPrivate Red: #E40E35
isPublic Green: #248913




<Entry
            id="category"
            type="select"
            label="Category"
            {...formik.getFieldProps("category")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.category}
          />
          <Entry
            type="textarea"
            id="description"
            label="Description"
            {...formik.getFieldProps("description")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.description}
          />
          <Entry
            type="file"
            id="image"
            label="Upload image (optional)"
            {...formik.getFieldProps("image")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.image}
          />
          <Entry
            type="checkbox"
            id="isPublic"
            label="Is entry public?"
            {...formik.getFieldProps("isPublic")}
            handleChange={formik.handleChange}
            handleBlur={formik.handleBlur}
            formValue={formik.values.isPublic}
          />
          <Entry type="submit" id="" label="" handleBlur={null} handleChange={null} formValue={null}/>